local x_speed = 0
local y_speed = 0
local direction = vmath.vector3(0, 0, 0)

local gravity = 15
local jump = 550
local movement = 50

local fall_time = 0

function init(self)
	msg.post(".", "acquire_input_focus")
	
	-- Get the game world dimensions from game.project file --
	game_width = tonumber(sys.get_config("display.width"))
	game_height = tonumber(sys.get_config("display.height"))
end

function update(self, dt)
	-- Friction --
	x_speed = vmath.lerp(0.1, x_speed, 0)
	x_speed = x_speed + vmath.length(direction)*movement
	
	-- Get position --
	pos = go.get_position()
	pos = pos + direction * x_speed * dt
	
	-- Wrap around edges--
	if pos.x < 0 then
		pos.x = game_width
	elseif pos.x > game_width then
		pos.x = 0
	end
	
	-- Set position --
	go.set_position(pos)

	-- World moves down --
	world = go.get_position('world')
	world.y = world.y - (y_speed * dt)
	go.set_position(world, 'world')
	y_speed = y_speed - gravity

	-- Detect Death --
	fall_time = fall_time + dt
	if fall_time > 3 then
		msg.post('main:/loader', 'load_world', {to = '#gameover'})
	end
	if y_speed > 0 then
		fall_time = 0
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash('collision_response') then
		if message.other_group == hash('platform') then
			if y_speed < 0 then
				y_speed = jump
				msg.post('#jump_sfx', 'play_sound')
			end
		end
	elseif message.other_group == hash('bouncer') then
		if y_speed < 0 then
			y_speed = jump * 3
			msg.post('#jump_sfx', 'play_sound')
		end
	end
end

--Player movement controls
function on_input(self, action_id, action)
	if action_id == hash('left') then
		if action.pressed then
			direction.x = -1
		elseif action.released and direction.x == -1 then
			direction.x = 0
		end
	elseif action_id == hash('right') then
		if action.pressed then
			direction.x = 1
		elseif action.released and direction.x == 1 then
			direction.x = 0
		end
	end
end